import doctest
class Feline:
    """
    Класс описывает животное, принадлежащее к семейству кошачьих.
    """

    def __init__(self, name: str, age: int):
        """
        :param name: имя кошачьего
        :param age: возраст кошачьего
        Примеры:
        >>> feline = Feline("Пантера",2)  # инициализация экземпляра класса
        """
        self.name = name
        self.age = age

    def __str__(self) -> str:
        """
        Метод выводит информацию о животном, принадлежащем к семейству кошачьих.
        :return: Познакомьтесь, это имя_кошачьего(name), возраст_кошачьего(age) лет.
        """
        return f'Познакомьтесь, это {self.name}, {self.age} лет.'

    def __repr__(self) -> str:
        """
        Метод показывает, как может быть инициализирован экземпляр класса
        :return:Вариант инициализии экземпляра класса.
        """
        return f'Feline(name={self.name!r},age={self.age!r})'

    def make_sound(self) -> str:
        """
        Метод информирует о том, что животное, принадлежащее к семейству кошачьих, подаёт голос.
        :return: Имя_кошачьего (name) подаёт голос.
        """
        return f' {self.name} подаёт голос.'

    def convert_to_human_age(self) -> int:
        """
        Метод конвертирует возраст кошачьего в эквивалентный ему человеческий возраст.
        Метод наследуется дочерним классом Cat.
        :return: Человеческий возраст, эквивалентный возрасту кошки
        """
        return self.age * 7


class Cat(Feline):
    """
    Класс описывает кошку.
    Класс является наследником класса Feline.
    """

    def __init__(self, name: str, age: int, color: str, breed: str):
        """
        :param name: имя кошки
        :param age: возраст кошки
        :param color: цвет кошки
        :param breed: порода кошки
         >>> cat = Cat('Мурка', 8, 'серый', 'персидская') # инициализация экземпляра класса
        """
        super().__init__(name, age)
        self.color = color
        self.breed = breed

    def __str__(self) -> str:
        """
        Метод выводит информацию кошке.
        Является перегрузкой метода __str__ базового класса.
        :return: Познакомьтесь, кошкаи имя_кошки(name):
                  Порода:порода_кошки(breed)
                  Цвет: цвет_кошки(color)
                  Возраст: возраст_кошки(age)
        """
        return f'Познакомьтесь, это кошка {self.name}:\n Порода:{self.breed} \n Цвет: {self.color} \n Возраст:{self.age} лет'

    def __repr__(self) -> str:
        """
        Является перегрузкой метода __repr__ базового класса.
        """
        return f'Cat(name={self.name!r},age={self.age!r}, color={self.color!r}, breed={self.breed!r})'

    def make_sound(self) -> str:
        """
        Метод воспроизводит мяуканье кошки.
        Перегрузка метода make_sound() базового класса,
        необходимая для того, чтобы уточнить,
        как именно подает голос конкретное животное.
        В данном случае класс представляет кошку,
        следовательно, она говорит "мяу".
        :return:Кошка  имя_кошки (name) говорит "мяу".
        """
        return f'Кошка {self.name} говорит "мяу".'

if __name__ == "__main__":
    doctest.testmod() # тестирование примеров, которые находятся в документации